import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# constants
g = 9.81  # m/s^2, acceleration due to gravity
payload_mass = 2.5 * g  # kg, payload mass
V_cruise = 10  # m/s, cruise speed
rho = 1.225  # kg/m^3, air density at sea level
CL_cruise = 0.5  # lift coefficient (placeholder value)
CLoverCD_cruise = 10  # lift-to-drag ratio (placeholder value)
CD_cruise = CL_cruise / CLoverCD_cruise  # drag coefficient (placeholder value)
ToverDmax_cruise = 1.2  # thrust-to-drag ratio (placeholder value)
ToverWmax_takeoff = 2.0  # thrust-to-weight ratio at takeoff (placeholder value)
n_hori_props = 4  # number of horizontal propellers
n_vert_props = 4  # number of vertical propellers
eta_hori_props = 0.50  # efficiency of horizontal propellers
eta_vert_props = 0.50  # efficiency of vertical propellers
V_takeoff = 10  # m/s, vertical takeoff speed
cruise_height = 150  # meters, height of takeoff or landing
takeoff_time = cruise_height / V_takeoff  # seconds, time to reach cruise height
avg_mission_time = 1200  # seconds, average mission time

def payload_mass_to_mtow(payload_mass):
    """Convert payload mass to maximum takeoff weight (MTOW) in kg.
    
    Args:
        payload_mass (float): Payload mass in kg.
        
    Returns:
        float: Maximum takeoff weight (MTOW) in kg.
    """
    mtow = 4.27 * payload_mass + 3.8 # Example conversion factor
    return mtow  # Example conversion factor

def calculate_wing_surface_area(mtow):
    """Calculate the wing surface area based on MTOW.
    Assumes vertical propellers are off during cruise.
    All lift is generated by the wings.
    
    Args:
        mtow (float): Maximum takeoff weight (MTOW) in kg.
        
    Returns:
        float: Wing surface area in m^2.
    """
    S = mtow / (0.5 * rho * V_cruise**2 * CL_cruise)
    return S

def calculate_drag_cruise(S, V_cruise):
    """Calculate drag based on wing surface area and cruise speed.
    
    Args:
        S (float): Wing surface area in m^2.
        V_cruise (float): Cruise speed in m/s.
        
    Returns:
        float: Drag force in N.
    """
    D = 0.5 * rho * V_cruise**2 * S * CD_cruise
    return D

def calculate_thrust_cruise(D):
    """Calculate thrust required to overcome drag.
    
    Args:
        D (float): Drag force in N.
        
    Returns:
        float: Thrust required in N.
    """
    T = D * ToverDmax_cruise  # Assuming level flight, thrust equals drag
    return T

def calculate_power_cruise(T, V_cruise):
    """Calculate power required for cruise flight.
    
    Args:
        T (float): Thrust in N.
        V_cruise (float): Cruise speed in m/s.
        
    Returns:
        float: Power required in W.
    """
    P_cruise = T * V_cruise  # Power = Thrust * Velocity
    return P_cruise

def calculate_evergy_per_mission():
    """Calculate energy required for the entire mission.
    
    Returns:
        float: Energy required in Wh.
    """
    pass

mtow = payload_mass_to_mtow(payload_mass)  # kg
S = calculate_wing_surface_area(mtow)  # m^2
D = calculate_drag_cruise(S, V_cruise)  # N
T = calculate_thrust_cruise(D)  # N
P_cruise = calculate_power_cruise(T, V_cruise)  # W

print(mtow, S, D, T, P_cruise)